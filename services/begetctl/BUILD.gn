# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//base/startup/init_lite/begetd.gni")

if (defined(ohos_lite)) {
  executable("begetctl") {
    output_name = "begetctl"
    sources = [
      "main.c",
      "param_cmd.c",
      "shell/shell_bas.c",
    ]
    defines = [
      "_GNU_SOURCE",  #syscall function need this macro definition
      "__MUSL__",
      "OHOS_LITE",
    ]
    if (param_test) {
      sources += [ "//base/startup/init_lite/test/moduletest/syspara.cpp" ]
    }
    include_dirs = [
      ".",
      "shell",
      "//base/startup/init_lite/services/include",
      "//base/startup/init_lite/services/log",
      "//base/startup/init_lite/interfaces/innerkits/include",
      "//base/startup/init_lite/services/include/param/",
      "//base/startup/init_lite/services/param/include",
      "//base/startup/init_lite/services/loopevent/include",
      "//third_party/bounds_checking_function/include",
      "//base/startup/init_lite/interfaces/innerkits/sandbox/include",
      "//third_party/cJSON",
    ]
    deps = [
      "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
      "//base/startup/init_lite/interfaces/innerkits:libbegetutil",
      "//base/startup/init_lite/services/utils:libinit_tools",
      "//build/lite/config/component/cJSON:cjson_static",
      "//third_party/bounds_checking_function:libsec_static",
    ]
  }
  group("begetctl_cmd") {
    if (enable_ohos_startup_init_feature_begetctl_liteos &&
        ohos_kernel_type != "liteos_m") {
      deps = [ ":begetctl" ]
    }
  }
} else {
  import("//build/ohos.gni")

  ohos_executable("begetctl") {
    sources = [
      "bootchart_cmd.c",
      "init_cmd_reboot.c",
      "main.c",
      "misc_daemon.cpp",
      "param_cmd.c",
      "sandbox.cpp",
      "service_control.c",
      "shell/shell_bas.c",
    ]

    defines = [ "_GNU_SOURCE" ]

    if (defined(product_name) && product_name == "rk3568") {
      defines += [ "PRODUCT_RK" ]
    }

    include_dirs = [
      ".",
      "shell",
      "//base/startup/init_lite/services/include",
      "//base/startup/init_lite/services/log",
      "//base/startup/init_lite/interfaces/innerkits/include",
      "//base/startup/init_lite/services/include/param/",
      "//base/startup/init_lite/services/param/include",
      "//base/startup/init_lite/services/loopevent/include",
      "//third_party/bounds_checking_function/include",
      "//base/startup/init_lite/interfaces/innerkits/sandbox/include",
      "//base/startup/init_lite/interfaces/innerkits/control_fd",
    ]
    deps = [
      "//base/startup/init_lite/interfaces/innerkits:libbegetutil",
      "//base/startup/init_lite/interfaces/innerkits/control_fd:libcontrolfd",
      "//base/startup/init_lite/interfaces/innerkits/sandbox:libsandbox",
      "//third_party/bounds_checking_function:libsec_shared",
    ]
    external_deps = [ "utils_base:utils" ]

    if (param_test) {
      sources += [
        "//base/startup/init_lite/test/moduletest/param_test_cmds.c",
        "//base/startup/init_lite/test/moduletest/syspara.cpp",
      ]
      deps += [ "//base/startup/init_lite/interfaces/innerkits:libbeget_proxy" ]
      defines += [
        "OHOS_SERVICE_DUMP",
        "INIT_TEST",
      ]
    }

    if (build_selinux) {
      include_dirs += [
        "//third_party/selinux/libselinux/include/",
        "//base/security/selinux/interfaces/policycoreutils/include/",
      ]
      deps += [ "//third_party/selinux:libselinux" ]
      external_deps += [ "selinux:libparaperm_checker" ]
      defines += [ "PARAM_SUPPORT_SELINUX" ]
    }

    symlink_target_name = [
      "misc_daemon",
      "reboot",
      "devctl",
      "service",
      "service_control",
      "start_service",
      "stop_service",
      "service",
      "sandbox",
    ]

    install_images = [ "system" ]
    install_enable = true

    part_name = "init"
  }

  ohos_executable("paramshell") {
    sources = [
      "param_cmd.c",
      "shell/shell_bas.c",
      "shell/shell_main.c",
    ]

    defines = [ "_GNU_SOURCE" ]

    include_dirs = [
      ".",
      "shell",
      "//base/startup/init_lite/services/include",
      "//base/startup/init_lite/services/log",
      "//base/startup/init_lite/interfaces/innerkits/include",
      "//base/startup/init_lite/services/include/param/",
      "//base/startup/init_lite/services/loopevent/include",
      "//base/startup/init_lite/services/param/include",
      "//third_party/bounds_checking_function/include",
    ]
    deps = [
      "//base/startup/init_lite/interfaces/innerkits:libbegetutil",
      "//third_party/bounds_checking_function:libsec_static",
    ]

    if (build_selinux) {
      deps += [ "//third_party/selinux:libselinux" ]
      external_deps = [ "selinux:libparaperm_checker" ]
      defines += [ "PARAM_SUPPORT_SELINUX" ]
    }

    if (param_test) {
      sources += [
        "//base/startup/init_lite/test/moduletest/param_test_cmds.c",
        "//base/startup/init_lite/test/moduletest/syspara.cpp",
      ]
      deps += [
        "//base/startup/init_lite/interfaces/innerkits:libbeget_proxy",
        "//base/startup/init_lite/services/loopevent:loopevent",
        "//base/startup/init_lite/services/utils:libinit_tools",
        "//base/startup/init_lite/services/utils:libinit_utils",
      ]
      defines += [
        "OHOS_SERVICE_DUMP",
        "INIT_TEST",
      ]
    }

    install_images = [ "system" ]
    install_enable = true

    part_name = "init"
  }

  ohos_executable("param") {
    sources = [
      "main.c",
      "param_cmd.c",
      "shell/shell_bas.c",
    ]

    defines = [
      "INIT_AGENT",
      "INIT_FILE",
      "_GNU_SOURCE",
    ]

    include_dirs = [
      ".",
      "shell",
      "//base/startup/init_lite/services/include",
      "//base/startup/init_lite/services/log",
      "//base/startup/init_lite/interfaces/innerkits/include",
      "//base/startup/init_lite/services/include/param/",
      "//base/startup/init_lite/services/loopevent/include",
      "//base/startup/init_lite/services/param/include",
      "//third_party/bounds_checking_function/include",
    ]
    deps = [
      "//base/startup/init_lite/services/log:agent_log",
      "//base/startup/init_lite/services/loopevent:loopevent",
      "//base/startup/init_lite/services/param:param_client",
      "//base/startup/init_lite/services/utils:libinit_tools",
      "//base/startup/init_lite/services/utils:libinit_utils",
      "//third_party/bounds_checking_function:libsec_static",
    ]

    external_deps = [
      "hilog_native:libhilog_base",
      "utils_base:utils",
    ]
    if (build_selinux) {
      deps += [ "//third_party/selinux:libselinux" ]
      external_deps += [ "selinux:libparaperm_checker" ]
      defines += [ "PARAM_SUPPORT_SELINUX" ]
    }
    install_images = [ "system" ]
    install_enable = true
    part_name = "init"
  }

  group("begetctl_cmd") {
    deps = [
      ":begetctl",
      ":param",
      ":paramshell",
    ]
  }
}
