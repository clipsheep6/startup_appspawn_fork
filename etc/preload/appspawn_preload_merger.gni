# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/python.gni")
import("//build/templates/common/copy.gni")

template("ohos_prebuilt_appspawn_preload") {
  assert(defined(invoker.sources), "sources must be defined for ${target_name}.")

  _merged_target = "${target_name}_merged"
  _sources = invoker.sources
  _merged_file = get_path_info(_sources[0], "file")
  _output_merged_file = target_gen_dir + "/${target_name}.merged/${_merged_file}"

  action_with_pydeps(_merged_target) {
    deps = []
    script = "//base/startup/appspawn/etc/preload/appspawn_preload_merger.py"
    depfile = "${target_gen_dir}/${target_name}.d"
    args = [
      "--output",
      rebase_path(_output_merged_file, root_build_dir),
      "--depfile",
      rebase_path(depfile, root_build_dir),
    ]
    foreach(_filename, _sources) {
      args += [ rebase_path(_filename, root_build_dir) ]
    }
    inputs = _sources
    outputs = [ _output_merged_file ]
  }

  ohos_copy(target_name) {
    deps = [ ":$_merged_target" ]
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",

                             "deps",
                             "public_configs",
                             "subsystem_name",
                             "part_name",

                             # For generate_module_info
                             "install_images",
                             "module_install_dir",
                             "relative_install_dir",
                             "symlink_target_name",

                             # Open source license related
                             "license_file",
                             "license_as_sources",
                           ])
    sources = [ _output_merged_file ]
    outputs = [ "${target_out_dir}/${target_name}/${_merged_file}" ]
    module_type = "etc"
    install_enable = true
    module_source_dir = "${target_out_dir}/${target_name}"
    module_install_name = _merged_file
    if (defined(invoker.install_enable)) {
      install_enable = invoker.install_enable
    }
  }
}
