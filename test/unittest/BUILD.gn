# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/startup/appspawn/appspawn.gni")
import("//build/test.gni")

config("utest_config") {
  cflags = [
    "-fprofile-arcs",
    "-ftest-coverage",
    "-Wno-implicit-fallthrough",
    "-Wno-unused-function",
  ]
  cflags_cc = [
    "-Wno-implicit-fallthrough",
    "-fexceptions",
  ]

  ldflags = [ "--coverage" ]

  include_dirs = [
    "${appspawn_path}/test/mock/include",
    "${appspawn_path}/common",
    "${appspawn_path}/standard",
    "${appspawn_path}/adapter",
    "${appspawn_path}/interfaces/innerkits/include",
    "${appspawn_path}/util/include",
    "//utils/native/base/include",
    "${aafwk_path}/frameworks/kits/appkit/native/app/include",
    "${aafwk_path}/interfaces/innerkits/app_manager/include/appmgr",
    "${aafwk_path}/interfaces/innerkits/ability_manager/include",
    "${aafwk_path}/frameworks/kits/ability/native/include",
    "${aafwk_path}/services/abilitymgr/include",
    "//base/global/resource_management/interfaces/inner_api/include",
    "//base/security/access_token/interfaces/innerkits/token_setproc/include",
    "//base/startup/init_lite/services/log",
    "//base/startup/init_lite/services/include",
    "//base/startup/init_lite/services/loopevent/include",
    "//base/startup/init_lite/interfaces/innerkits/include",
    "//base/startup/syspara_lite/interfaces/innerkits/native/syspara/include",
    "//third_party/json/include",
  ]
}

ohos_unittest("AppSpawn_ut") {
  module_out_path = "${module_output_path}"

  defines = [
    "usleep(time) = MockSleep(time)",
    "APPSPAWN_TEST",
  ]

  sources = [
    "${appspawn_path}/adapter/appspawn_ace.cpp",
    "${appspawn_path}/adapter/appspawn_adapter.cpp",
    "${appspawn_path}/adapter/appspawn_sandbox.cpp",
    "${appspawn_path}/common/appspawn_server.c",
    "${appspawn_path}/interfaces/innerkits/client/appspawn_socket.cpp",
    "${appspawn_path}/interfaces/innerkits/client/client_socket.cpp",
    "${appspawn_path}/standard/appspawn_process.c",
    "${appspawn_path}/standard/appspawn_service.c",
    "${appspawn_path}/util/src/json_utils.cpp",
    "${appspawn_path}/util/src/sandbox_utils.cpp",
  ]

  sources += [
    "${appspawn_path}/test/unittest/app_spawn_socket_test/app_spawn_socket_test.cpp",
    "${appspawn_path}/test/unittest/app_spawn_standard_test/app_spawn_standard_test.cpp",
    "${appspawn_path}/test/unittest/client_socket_test/client_socket_test.cpp",
  ]

  configs = [ "//base/startup/appspawn/test/unittest:utest_config" ]

  deps = [
    "${aafwk_path}/frameworks/native/appkit:appkit_native",
    "//base/security/access_token/interfaces/innerkits/token_setproc:libtoken_setproc",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "hiviewdfx_hilog_native:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "utils_base:utils",
  ]
}

group("unittest") {
  testonly = true

  deps = [ ":AppSpawn_ut" ]
}
