# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/startup/appspawn/appspawn.gni")
import("//build/test.gni")

if (!defined(ohos_lite)) {
  ohos_unittest("AppSpawn_ut") {
    module_out_path = "${module_output_path}"
    deps = []
    defines = [
      "APPSPAWN_BASE_DIR=\"/data/appspawn_ut\"",
      "APPSPAWN_LABEL=\"APPSPAWN_UT\"",
      "APPSPAWN_TEST",
      "APPSPAWN_DEBUG",
      "USER_TIMER_TO_CHECK",
      "OHOS_DEBUG",
      "GRAPHIC_PERMISSION_CHECK",
      "capset=CapsetStub",
      "unshare=UnshareStub",
      "mount=MountStub",
      "symlink=SymlinkStub",
      "chdir=ChdirStub",
      "chroot=ChrootStub",
      "syscall=SyscallStub",
      "umount2=Umount2Stub",
      "access=AccessStub",
      "dlopen=DlopenStub",
      "dlsym=DlsymStub",
      "dlclose=DlcloseStub",
      "execv=ExecvStub",
      "getprocpid=GetprocpidStub",
      "setgroups=SetgroupsStub",
      "setresgid=SetresgidStub",
      "setresuid=SetresuidStub",
      "setuid=SetuidStub",
      "setgid=SetgidStub",
      "execvp=ExecvpStub",
    ]
    include_dirs = [
      "${appspawn_path}",
      "${appspawn_path}/common",
      "${appspawn_path}/standard",
      "${appspawn_path}/modules/modulemgr",
      "${appspawn_path}/modules/ace_adapter",
      "${appspawn_path}/modules/common",
      "${appspawn_path}/modules/sandbox",
      "${appspawn_innerkits_path}/include",
      "${appspawn_innerkits_path}/client",
      "${appspawn_innerkits_path}/permission",
      "${appspawn_path}/modules/module_engine/include",
      "${appspawn_path}/test/mock",
      "${appspawn_path}/test/unittest",
      "${appspawn_path}/util/include",
      "${startup_path}/init/interfaces/innerkits/include",
      "${startup_path}/init/interfaces/innerkits/include/syspara",
      "${startup_path}/init/interfaces/innerkits/include/param",
      "${startup_path}/init/interfaces/innerkits/seccomp/include",
      "${startup_path}/init/services/loopevent/include",
      "${startup_path}/init/services/loopevent/timer",
      "${ability_runtime_path}/interfaces/kits/native/appkit/app",
      "//base/customization/config_policy/interfaces/inner_api/include",
      "//base/hiviewdfx/hitrace/interfaces/native/innerkits/include/hitrace_meter",
      "//base/hiviewdfx/hisysevent/interfaces/native/innerkits/hisysevent/include",
      "//base/security/access_token/interfaces/innerkits/token_setproc/include",
      "//base/security/selinux_adapter/interfaces/policycoreutils/include",
      "//base/notification/eventhandler/interfaces/inner_api",
      "//base/security/access_token/interfaces/innerkits/accesstoken/include",
      "//commonlibrary/c_utils/base/include",
      "//foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
      "//foundation/arkui/napi",
      "//third_party/libuv/include",
      "//third_party/selinux/libselinux/include/",
    ]
    sources = [
      "${appspawn_path}/common/appspawn_server.c",
      "${appspawn_path}/modules/modulemgr/appspawn_modulemgr.c",
      "${appspawn_path}/standard/appspawn_appmgr.c",
      "${appspawn_path}/standard/appspawn_msgmgr.c",
      "${appspawn_path}/standard/appspawn_service.c",
      "${appspawn_path}/standard/nwebspawn_launcher.c",
      "${appspawn_path}/util/src/appspawn_base64.c",
      "${appspawn_path}/util/src/appspawn_utils.c",
      "${appspawn_path}/util/src/json_utils.cpp",
    ]

    # modules sources
    sources += [
      "${appspawn_path}/modules/ace_adapter/ace_adapter.cpp",
      "${appspawn_path}/modules/ace_adapter/command_lexer.cpp",
      "${appspawn_path}/modules/common/appspawn_adapter.cpp",
      "${appspawn_path}/modules/common/appspawn_cgroup.c",
      "${appspawn_path}/modules/common/appspawn_common.c",
      "${appspawn_path}/modules/nweb_adapter/nwebspawn_adapter.cpp",
      "${appspawn_path}/modules/sandbox/appspawn_permission.c",
      "${appspawn_path}/modules/sandbox/appspawn_sandbox.c",
      "${appspawn_path}/modules/sandbox/sandbox_cfgvar.c",
      "${appspawn_path}/modules/sandbox/sandbox_expand.c",
      "${appspawn_path}/modules/sandbox/sandbox_load.c",
      "${appspawn_path}/modules/sandbox/sandbox_manager.c",
      "${startup_path}/init/interfaces/innerkits/hookmgr/hookmgr.c",
      "${startup_path}/init/interfaces/innerkits/modulemgr/modulemgr.c",
    ]

    # client sources
    sources += [
      "${appspawn_innerkits_path}/client/appspawn_client.c",
      "${appspawn_innerkits_path}/client/appspawn_msg.c",
      "${appspawn_innerkits_path}/permission/appspawn_mount_permission.cpp",
    ]

    # add stub
    include_dirs += [ "${appspawn_path}/test/mock" ]
    sources += [
      "${appspawn_path}/test/mock/app_spawn_stub.cpp",
      "${appspawn_path}/test/mock/app_system_stub.c",
    ]

    # add test
    include_dirs += [ "${appspawn_path}/test/unittest" ]
    sources += [
      "${appspawn_path}/test/unittest/app_spawn_client_test/app_spawn_client_test.cpp",
      "${appspawn_path}/test/unittest/app_spawn_standard_test/app_spawn_cgroup_test.cpp",
      "${appspawn_path}/test/unittest/app_spawn_standard_test/app_spawn_cold_run_test.cpp",
      "${appspawn_path}/test/unittest/app_spawn_standard_test/app_spawn_command_lexer_test.cpp",
      "${appspawn_path}/test/unittest/app_spawn_standard_test/app_spawn_sandbox_test.cpp",
      "${appspawn_path}/test/unittest/app_spawn_standard_test/app_spawn_service_test.cpp",
      "${appspawn_path}/test/unittest/app_spawn_standard_test/nweb_spawn_service_test.cpp",
      "${appspawn_path}/test/unittest/app_spawn_test_helper.cpp",
    ]

    configs = [ "//base/startup/appspawn:appspawn_config" ]
    deps += [
      "//third_party/cJSON:cjson",
      "//third_party/selinux:libselinux",
    ]
    external_deps = [
      "c_utils:utils",
      "config_policy:configpolicy_util",
      "hilog:libhilog",
      "init:libbegetutil",
    ]

    if (asan_detector || is_asan) {
      defines += [ "ASAN_DETECTOR" ]
      sources += [ "${appspawn_path}/modules/asan_detector/asan_detector.c" ]
    }

    if (appspawn_report_event) {
      defines += [ "REPORT_EVENT" ]
      sources += [ "${appspawn_path}/modules/sysevent/event_reporter.cpp" ]
      external_deps += [ "hisysevent:libhisysevent" ]
    }
  }
}
